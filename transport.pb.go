// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transport.proto

package transport

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing port json data.
type SendPortRequest struct {
	Portjson             []byte   `protobuf:"bytes,1,opt,name=portjson,proto3" json:"portjson,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendPortRequest) Reset()         { *m = SendPortRequest{} }
func (m *SendPortRequest) String() string { return proto.CompactTextString(m) }
func (*SendPortRequest) ProtoMessage()    {}
func (*SendPortRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transport_6758cb3d0c3ade33, []int{0}
}
func (m *SendPortRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendPortRequest.Unmarshal(m, b)
}
func (m *SendPortRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendPortRequest.Marshal(b, m, deterministic)
}
func (dst *SendPortRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendPortRequest.Merge(dst, src)
}
func (m *SendPortRequest) XXX_Size() int {
	return xxx_messageInfo_SendPortRequest.Size(m)
}
func (m *SendPortRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendPortRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendPortRequest proto.InternalMessageInfo

func (m *SendPortRequest) GetPortjson() []byte {
	if m != nil {
		return m.Portjson
	}
	return nil
}

// The response message containing result string message
type SendPortReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendPortReply) Reset()         { *m = SendPortReply{} }
func (m *SendPortReply) String() string { return proto.CompactTextString(m) }
func (*SendPortReply) ProtoMessage()    {}
func (*SendPortReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_transport_6758cb3d0c3ade33, []int{1}
}
func (m *SendPortReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendPortReply.Unmarshal(m, b)
}
func (m *SendPortReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendPortReply.Marshal(b, m, deterministic)
}
func (dst *SendPortReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendPortReply.Merge(dst, src)
}
func (m *SendPortReply) XXX_Size() int {
	return xxx_messageInfo_SendPortReply.Size(m)
}
func (m *SendPortReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SendPortReply.DiscardUnknown(m)
}

var xxx_messageInfo_SendPortReply proto.InternalMessageInfo

func (m *SendPortReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The request message containing port name.
type GetPortRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPortRequest) Reset()         { *m = GetPortRequest{} }
func (m *GetPortRequest) String() string { return proto.CompactTextString(m) }
func (*GetPortRequest) ProtoMessage()    {}
func (*GetPortRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_transport_6758cb3d0c3ade33, []int{2}
}
func (m *GetPortRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPortRequest.Unmarshal(m, b)
}
func (m *GetPortRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPortRequest.Marshal(b, m, deterministic)
}
func (dst *GetPortRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPortRequest.Merge(dst, src)
}
func (m *GetPortRequest) XXX_Size() int {
	return xxx_messageInfo_GetPortRequest.Size(m)
}
func (m *GetPortRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPortRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPortRequest proto.InternalMessageInfo

func (m *GetPortRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the port json data
type GetPortReply struct {
	Portjson             []byte   `protobuf:"bytes,1,opt,name=portjson,proto3" json:"portjson,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPortReply) Reset()         { *m = GetPortReply{} }
func (m *GetPortReply) String() string { return proto.CompactTextString(m) }
func (*GetPortReply) ProtoMessage()    {}
func (*GetPortReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_transport_6758cb3d0c3ade33, []int{3}
}
func (m *GetPortReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPortReply.Unmarshal(m, b)
}
func (m *GetPortReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPortReply.Marshal(b, m, deterministic)
}
func (dst *GetPortReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPortReply.Merge(dst, src)
}
func (m *GetPortReply) XXX_Size() int {
	return xxx_messageInfo_GetPortReply.Size(m)
}
func (m *GetPortReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPortReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetPortReply proto.InternalMessageInfo

func (m *GetPortReply) GetPortjson() []byte {
	if m != nil {
		return m.Portjson
	}
	return nil
}

func init() {
	proto.RegisterType((*SendPortRequest)(nil), "transport.SendPortRequest")
	proto.RegisterType((*SendPortReply)(nil), "transport.SendPortReply")
	proto.RegisterType((*GetPortRequest)(nil), "transport.GetPortRequest")
	proto.RegisterType((*GetPortReply)(nil), "transport.GetPortReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransportClient is the client API for Transport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransportClient interface {
	// Sends port data
	SendPort(ctx context.Context, in *SendPortRequest, opts ...grpc.CallOption) (*SendPortReply, error)
	// Gets port data
	GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*GetPortReply, error)
}

type transportClient struct {
	cc *grpc.ClientConn
}

func NewTransportClient(cc *grpc.ClientConn) TransportClient {
	return &transportClient{cc}
}

func (c *transportClient) SendPort(ctx context.Context, in *SendPortRequest, opts ...grpc.CallOption) (*SendPortReply, error) {
	out := new(SendPortReply)
	err := c.cc.Invoke(ctx, "/transport.Transport/SendPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*GetPortReply, error) {
	out := new(GetPortReply)
	err := c.cc.Invoke(ctx, "/transport.Transport/GetPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportServer is the server API for Transport service.
type TransportServer interface {
	// Sends port data
	SendPort(context.Context, *SendPortRequest) (*SendPortReply, error)
	// Gets port data
	GetPort(context.Context, *GetPortRequest) (*GetPortReply, error)
}

func RegisterTransportServer(s *grpc.Server, srv TransportServer) {
	s.RegisterService(&_Transport_serviceDesc, srv)
}

func _Transport_SendPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).SendPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport.Transport/SendPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).SendPort(ctx, req.(*SendPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport.Transport/GetPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).GetPort(ctx, req.(*GetPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transport.Transport",
	HandlerType: (*TransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPort",
			Handler:    _Transport_SendPort_Handler,
		},
		{
			MethodName: "GetPort",
			Handler:    _Transport_GetPort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport.proto",
}

func init() { proto.RegisterFile("transport.proto", fileDescriptor_transport_6758cb3d0c3ade33) }

var fileDescriptor_transport_6758cb3d0c3ade33 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x29, 0x4a, 0xcc,
	0x2b, 0x2e, 0xc8, 0x2f, 0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0xe9, 0x72, 0xf1, 0x07, 0xa7, 0xe6, 0xa5, 0x04, 0xe4, 0x17, 0x95, 0x04, 0xa5, 0x16, 0x96, 0xa6,
	0x16, 0x97, 0x08, 0x49, 0x71, 0x71, 0x80, 0xa4, 0xb2, 0x8a, 0xf3, 0xf3, 0x24, 0x18, 0x15, 0x18,
	0x35, 0x78, 0x82, 0xe0, 0x7c, 0x25, 0x4d, 0x2e, 0x5e, 0x84, 0xf2, 0x82, 0x9c, 0x4a, 0x21, 0x09,
	0x2e, 0xf6, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0xb0, 0x5a, 0xce, 0x20, 0x18, 0x57, 0x49,
	0x85, 0x8b, 0xcf, 0x3d, 0xb5, 0x04, 0xd9, 0x60, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0x5c, 0x98, 0x42,
	0x30, 0x5b, 0x49, 0x8b, 0x8b, 0x07, 0xae, 0x0a, 0x64, 0x1e, 0x1e, 0xcb, 0x8d, 0x26, 0x30, 0x72,
	0x71, 0x86, 0xc0, 0x5c, 0x2e, 0xe4, 0xc4, 0xc5, 0x01, 0x73, 0x8a, 0x90, 0x94, 0x1e, 0xc2, 0x8b,
	0x68, 0xde, 0x91, 0x92, 0xc0, 0x2a, 0x57, 0x90, 0x53, 0xa9, 0xc4, 0x20, 0x64, 0xcf, 0xc5, 0x0e,
	0xb5, 0x5d, 0x48, 0x12, 0x49, 0x19, 0xaa, 0xbb, 0xa5, 0xc4, 0xb1, 0x49, 0x81, 0x0d, 0x70, 0xd2,
	0xe6, 0x12, 0xcf, 0xcb, 0xcf, 0x4b, 0xcd, 0x4d, 0xac, 0xd0, 0x03, 0x49, 0xe7, 0x23, 0x54, 0x3a,
	0xf1, 0x81, 0xd4, 0xe5, 0xc3, 0xdd, 0x1b, 0xc0, 0x98, 0xc4, 0x06, 0x0e, 0x7d, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xf8, 0xae, 0xb3, 0xa9, 0x90, 0x01, 0x00, 0x00,
}
